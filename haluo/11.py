# 项目：hook_haluo.py
# 时间：2024-05-16 15:56:56
# 运行环境：python3.11.x
import sys
PYTHON_VERSION = ".".join(str(i) for i in sys.version_info[:2])
if PYTHON_VERSION != "3.11":
  print(f"【你的青龙python版本为{PYTHON_VERSION},请使用python3.11.x运行此脚本】")
  exit()
try:
	import marshal,lzma,gzip,bz2,binascii,zlib;exec(marshal.loads(binascii.a2b_base64(b'YwAAAAAAAAAAAAAAAAcAAAAAAAAA84QAAACXAGQAZAFsAFoAZABkAWwBWgFkAGQBbAJaAmQAZAFsA1oDZABkAWwEWgRkAGQBbAVaBQIAZQYCAGUAagcAAAAAAAAAAAIAZQRqCAAAAAAAAAAAZAKmAQAAqwEAAAAAAAAAAKYBAACrAQAAAAAAAAAApgEAAKsBAAAAAAAAAAABAGQBUwApA+kAAAAATnMRKgAAWXdBQUFBQUFBQUFBQUFBQUFBWUFBQUFBQUFBQTh4d0JBQUNYQUdRQVdnQmtBV1FDYkFGYUFXUUJaQUpzQWxvQ1pBRmtBbXdEV2dOa0FXUURiQVJ0QkZvRUFRQmtBV1FFYkFWdEJsb0dBUUJrQVdRQ2JBZGFCMlFCWkFWc0NHMEpXZ2x0Q2xvS0FRQmtCb1FBV2dzQ0FFY0FaQWVFQUdRSXBnSUFBS3NDQUFBQUFBQUFBQUJhREdVTlpBbHJBZ0FBQUFCeVQyUUtXZzRDQUdVS2FnOEFBQUFBQUFBQUFHUUxaUTVrREtZREFBQ3JBd0FBQUFBQUFBQUFXaEJrRFlRQUFnQmxFV1VRcGdFQUFLc0JBQUFBQUFBQUFBQkVBS1lBQUFDckFBQUFBQUFBQUFBQVdoSUNBR1VKYWhNQUFBQUFBQUFBQUdRT1pBK2dGQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWlJLbUFRQUFxd0VBQUFBQUFBQUFBS1lDQUFDckFnQUFBQUFBQUFBQUFRQmtBbE1BWkFKVEFDa1FkZm9CQUFBS1kzSnZiam9nTXpBZ09TQXFJQ29nS2dwdVpYY2dSVzUyS0NkQlVGQXQ1Wk9JNVpXd0p5azdDZ3JrdTZQbm9JSG9yN2ZsaTcvbmxLamt1bzdwblo3bXM1WG5tNGpsaUtrczVMaUE1WWlINUxpTzVweXM1THE2NXBlZzVZV3pMT2l2cGVTN28rZWdnZVM3aGVlVXFPUzZqdVd0cHVTNW9PUzZwT2ExZ1N6b3I3ZnBtSVhvcDRqa3VJdm92YjB5Tk9Xd2orYVh0dVdHaGVXSW9PbVpwT1M3bytlZ2dRb0tLaURtdEx2bGlxamxoYVhsajZQdnZKcmx2cTdrdjZIbWlaUGx2SUJvZEhSd2N6b3ZMMkV1WXpONExtMWxMemh5YldkbU5TQWc1YnlBNVpDdjVvcVQ1WXlGNzd5TTZMNlQ1WVdsNW9tTDVweTY1WSszNmFxTTZLK0I1NkNCNzd5TUlPYUtrK2VadSttWmh1V01oU0JvZEhSd2N6b3ZMMkZ3YVM1b1pXeHNiMkpwYTJVdVkyOXRMMkZ3YVQ5MWMyVnlMbUZqWTI5MWJuUXVhRFZNYjJkcGJpRG92NVRsbTU3bGo0TG1sYkRrdUszbm1vUjBiMnRsYmdvcUlPV1BqZW1taU9lK3BPKzhtbWgwZEhCek9pOHZkQzV0WlM5MmFHOXZhMTkzYjI5c0Npb2c1WStZNlllUENtVjRjRzl5ZENCb2IyOXJYM2Q0Y0dGNVBTZGJDaUFnSUNCN0NpQWdJQ0FnSUNBZ0ltNWhiV1VpT2lBaTVhU0g1ck9vSWl3S0lDQWdJQ0FnSUNBaWRHOXJaVzRpT2lBaUlpd0tJQ0FnSUNBZ0lDQWlWWE5sY2kxQloyVnVkQ0k2SUNJaUNpQWdJQ0I5Q2wwbkN1a0FBQUFBVGlrQjJnaGtZWFJsZEdsdFpTa0IyZ2gxY214d1lYSnpaU2tDMmdadWIzUnBabm5hQm1OdmJXMXZibU1CQUFBQUFBQUFBQUFBQUFBRUFBQUFBd0FBQVBOWUFRQUFsd0IwQVFBQUFBQUFBQUFBQUFCcUFRQUFBQUFBQUFBQVpBR21BUUFBcXdFQUFBQUFBQUFBQUtBQ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ21BQUFBcXdBQUFBQUFBQUFBQUgwQmZBR2dBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWkFLbUFRQUFxd0VBQUFBQUFBQUFBR1FEYXdJQUFBQUFjbXA4QWFBQkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQmtCS1lCQUFDckFRQUFBQUFBQUFBQW9BRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBR1FGcGdFQUFLc0JBQUFBQUFBQUFBQjlBblFIQUFBQUFBQUFBQUFBQUh3Q3BnRUFBS3NCQUFBQUFBQUFBQUI5QTN3RGFnUUFBQUFBQUFBQUFIMEVkQWNBQUFBQUFBQUFBQUFBZkFDbUFRQUFxd0VBQUFBQUFBQUFBR29FQUFBQUFBQUFBQUI5Qlh3QW9BVUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSHdGZkFSd0FXUUdwZ0lBQUtzQ0FBQUFBQUFBQUFCOUFId0FVd0FwQjA1NkpXaDBkSEJ6T2k4dmQzZDNMbVpwYkdWemJXVnFMbU51TDNkaGFXUnZiV0ZwYmk1d2FIRGFCR052WkdWeUFRQUFBTm9FWkdGMFlkb0ZiSFZ2WkdsNkQzVTNaSE11YzNrMk56TXVjMmh2Y0NrRzJnaHlaWEYxWlhOMGM5b0RaMlYwMmdScWMyOXVjZ01BQUFEYUNHaHZjM1J1WVcxbDJnZHlaWEJzWVdObEtRYmFDV2x1ZG1sMFpWVnliTm9CY3RvTGJtVjNSVzUwY25sVmNtemFDbkJoY25ObFpGOTFjbXphQkdodmMzVGFDRzlzWkY5b2IzTjBjd1lBQUFBZ0lDQWdJQ0Q2Q2xCNUxVWjFjMk5oZEdYYUQyZGxkRTVsZDBsdWRtbDBaVlZ5YkhJV0FBQUFId0FBQUhPV0FBQUFnQURkQ0JDTUROQVZQTkVJUGRRSVBkY0lRdElJUXRFSVJOUUlSSUJCMkFjSWgzV0NkWWhXZ1gyRWZaZ0IwZ2NaMEFjWjJCWVhsMldTWlpoR2tXMlViZGNXSjlJV0o2Z0gwUll3MUJZd2lBdmRGUjJZYTlFVkt0UVZLb2dLMkE4WjFBOGlpQVRkRXh1WVNkRVRKdFFUSnRRVEw0Z0kyQlFkMXhRbDBoUWxvR2l3Qk5Bd1NkQTRTZEVVU3RRVVNvZ0oyQXNVMEFRVTh3QUFBQUJqQUFBQUFBQUFBQUFBQUFBQUFnQUFBQUFBQUFEek5BQUFBSmNBWlFCYUFXUUFXZ0prQVlRQVdnTmtDR1FEaEFGYUJHUUVoQUJhQldRRmhBQmFCbVFHaEFCYUIyUUhoQUJhQ0dRQ1V3QXBDZG9FVkVGVFMyTURBQUFBQUFBQUFBQUFBQUFGQUFBQUF3QUFBUE9jQVFBQWx3QjhBV1FCZWdBQUFId0FYd0FBQUFBQUFBQUFBSHdDb0FFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFHUUNaQUNtQWdBQXF3SUFBQUFBQUFBQUFId0FYd0lBQUFBQUFBQUFBSHdDb0FFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFHUURaQUNtQWdBQXF3SUFBQUFBQUFBQUFId0FYd01BQUFBQUFBQUFBSHdDb0FFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFHUUVaQUNtQWdBQXF3SUFBQUFBQUFBQUFId0FYd1FBQUFBQUFBQUFBSHdDb0FFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFHUUZaQUNtQWdBQXF3SUFBQUFBQUFBQUFId0FYd1VBQUFBQUFBQUFBSHdDb0FFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFHUUdaQUNtQWdBQXF3SUFBQUFBQUFBQUFId0FYd1lBQUFBQUFBQUFBR1FIZkFCZkJ3QUFBQUFBQUFBQWZBS2dBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWkFoOEFHb0hBQUFBQUFBQUFBQ21BZ0FBcXdJQUFBQUFBQUFBQUh3QVh3Y0FBQUFBQUFBQUFHUUpmQUJmQ0FBQUFBQUFBQUFBWkFwa0MyUU1aQXhrRFp3RWZBQmZDUUFBQUFBQUFBQUFaQUJUQUNrT1R1a0JBQUFBMmdSdVlXMWwyZ1YwYjJ0bGJ0b09ZMjkxZEc5dFgzWmxjbk5wYjI3YURuZDRjSFZ6YUdWeVgzUnZhMlZ1Mmd4M2VIQjFjMmhsY2w5MWFXUmhDUUVBQUUxdmVtbHNiR0V2TlM0d0lDaE1hVzUxZURzZ1FXNWtjbTlwWkNBeE16c2dUVEl3TVRKTE1URkJReUJDZFdsc1pDOVVTMUV4TGpJeU1EZ3lPUzR3TURJN0lIZDJLU0JCY0hCc1pWZGxZa3RwZEM4MU16Y3VNellnS0V0SVZFMU1MQ0JzYVd0bElFZGxZMnR2S1NCV1pYSnphVzl1THpRdU1DQkRhSEp2YldVdk1URTNMakF1TUM0d0lFMXZZbWxzWlNCVFlXWmhjbWt2TlRNM0xqTTJJRTFOVjBWQ1NVUXZNalkxTVNCTmFXTnliMDFsYzNObGJtZGxjaTg0TGpBdU5ESXVNalEyTUNnd2VESTRNREF5UVRVNEtTQlhaVU5vWVhRdllYSnROalFnVjJWcGVHbHVJRTVsZEZSNWNHVXZWMGxHU1NCTVlXNW5kV0ZuWlM5bGJpQkJRa2t2WVhKdE5qVDZDbFZ6WlhJdFFXZGxiblRhQUhwMVRXOTZhV3hzWVM4MUxqQWdLRTFoWTJsdWRHOXphRHNnU1c1MFpXd2dUV0ZqSUU5VElGZ2dNVEJmTVRWZk55a2dRWEJ3YkdWWFpXSkxhWFF2TlRNM0xqTTJJQ2hMU0ZSTlRDd2diR2xyWlNCSFpXTnJieWtnUTJoeWIyMWxMekV4TVM0d0xqQXVNQ0JUWVdaaGNta3ZOVE0zTGpNMitoQmhjSEJzYVdOaGRHbHZiaTlxYzI5dWVoWm9kSFJ3Y3pvdkwyRndhUzV5WVdsdWVYVnVMbU5qS1FSeUlRQUFBUG9NUTI5dWRHVnVkQzFVZVhCbDJnWlBjbWxuYVc3YUIxSmxabVZ5WlhJcEN0b0ZhVzVrWlhoeUN3QUFBSEljQUFBQWNoMEFBQURhQTNabGNuSWZBQUFBY2lBQUFBRGFBblZoMmdOdGMyZmFCMmhsWVdSbGNuTXBBOW9FYzJWc1p0b0JhZG9DWTJ0ekF3QUFBQ0FnSUhJVkFBQUEyZ2hmWDJsdWFYUmZYM29OVkVGVFN5NWZYMmx1YVhSZlh5c0FBQUJ6d3dBQUFJQUE0QlVXbUJHUlZZZ0VqQXJZRkJhWFJwSkdtRGFnTk5FVUtOUVVLSWdFakFuWUZSZVhWcEpXbUVlZ1ZORVZLdFFWS29nRWpBcllFeFdYTnBJMjBCb3FxRVRSRXpIVUV6R0lCSXdJMkI0Z24yYWFadEFsTmJCMDBSNDgxQjQ4aUFUVUNCdllIQjZmUnBwR29ENndOTkVjT05RY09JZ0UxQWdaOEFJQUUxNEVpQVNNQjlnU0ZKY21raWFZSEtCMHBIZlJFaS9VRWkrSUJJd0gyQk1WaUFTTUNQQUVBQnRTQXRnY0x0Z1dMdGdYTC9BSkJSZ0s4QUFGR0FxSUJJd01pQXlJREhJWEFBQUFUbU1EQUFBQUFBQUFBQUFBQUFBTEFBQUFBd0FBQVBNMEFRQUFsd0I4QVhKTmRBRUFBQUFBQUFBQUFBQUFkQU1BQUFBQUFBQUFBQUFBYWdJQUFBQUFBQUFBQUtZQUFBQ3JBQUFBQUFBQUFBQUFvQU1BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUdRQnBnRUFBS3NCQUFBQUFBQUFBQUNiQUdRQ2ZBQnFCQUFBQUFBQUFBQUFtd0JrQTN3QWFnVUFBQUFBQUFBQUFKc0FaQVI4QVpzQVpBVjhBcHNBblFtbUFRQUFxd0VBQUFBQUFBQUFBQUVBWkFCVEFIUUJBQUFBQUFBQUFBQUFBSFFEQUFBQUFBQUFBQUFBQUdvQ0FBQUFBQUFBQUFDbUFBQUFxd0FBQUFBQUFBQUFBS0FEQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCa0FhWUJBQUNyQVFBQUFBQUFBQUFBbXdCa0Fud0FhZ1FBQUFBQUFBQUFBSnNBWkFOOEFHb0ZBQUFBQUFBQUFBQ2JBR1FHZkFLYkFKMEhwZ0VBQUtzQkFBQUFBQUFBQUFBQkFHUUFVd0FwQjA1NkNDVklPaVZOT2lWVGRRY0FBQUFnNTVTbzVvaTNkUU1BQUFEamdKQjFDUUFBQU9PQWtlKzhtdU9Ba0hVRkFBQUE0NENSTFNCMUJnQUFBT09Ba2UrOG1pa0cyZ1Z3Y21sdWRISUNBQUFBMmdOdWIzZmFDSE4wY21aMGFXMWxjaWNBQUFCeUhBQUFBQ2tEY2l3QUFBRGFCbTFsZEdodlpISXFBQUFBY3dNQUFBQWdJQ0J5RlFBQUFOb0RiRzluZWdoVVFWTkxMbXh2WnowQUFBQnpyZ0FBQUlBQTJBc1I4QUFEQ1dnQjNRd1JsVmlVWEpGZWxGN1hGU3pTRlN5b1d0RVZPTlFWT05BU2R0QVNkc0FVeEJyUUVuYlFFbmJRVUZUVVVGblFFbmJRRW5iUVpHclFFbmJRRW5iUWNYVFFFbmJRRW5iUkRIZlVESGZRREhmUURIZlFESGZsREJHVldKUmNrVjZVWHRjVkxOSVZMS2hhMFJVNDFCVTQwQkptMEJKbXdCVEVHdEFTWnRBU1p0QlFWTlJRV2RBU1p0QVNadEJoWk5BU1p0QVNadEVNWjlRTVo5QU1aOUFNWjlBTVozSVhBQUFBWXdJQUFBQUFBQUFBQUFBQUFBUUFBQUFEQUFBQTh6WUFBQUNYQUh3QlpBQmtBWVVDR1FBQUFBQUFBQUFBQUdRQ2VnQUFBSHdCWkFOa0FJVUNHUUFBQUFBQUFBQUFBSG9BQUFCOUFud0NVd0FwQkU3cEF3QUFBSG9FS2lvcUt1bjgvLy8vcVFBcEEzSXNBQUFBMmd4d2FHOXVaVjl1ZFcxaVpYTGFEV2hwWkdSbGJsOXVkVzFpWlhKekF3QUFBQ0FnSUhJVkFBQUEyaEZvYVdSbFgzQm9iMjVsWDI1MWJXSmxjbm9XVkVGVFN5NW9hV1JsWDNCb2IyNWxYMjUxYldKbGNrTUFBQUJ6S1FBQUFJQUE0Qmdrb0ZLZ1lhQlMxQmdvcURiUkdER3dUTUFTd0JQQUU5UTBSZEVZUllnTjJBOGMwQWdjY2hjQUFBQmpBUUFBQUFBQUFBQUFBQUFBQ1FBQUFBTUFBQUR6SUFJQUFKY0FaQUY5QVdRQ1pBTmtCR1FGWkFaa0IyUUluQVo5QW1RSmZBQnFBQUFBQUFBQUFBQUFaQXFjQW4wRGRBTUFBQUFBQUFBQUFBQUFhZ0lBQUFBQUFBQUFBSHdCZkFOMEJ3QUFBQUFBQUFBQUFBQnFCQUFBQUFBQUFBQUFmQUttQVFBQXF3RUFBQUFBQUFBQUFLd0xwZ01BQUtzREFBQUFBQUFBQUFCOUJId0VhZ1VBQUFBQUFBQUFBR1FNYXdJQUFBQUFjcWw4QktBREFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ21BQUFBcXdBQUFBQUFBQUFBQUgwRmZBVmtEUmtBQUFBQUFBQUFBQUJrRG1zQ0FBQUFBSEtKZkFWa0R4a0FBQUFBQUFBQUFBQmtFQmtBQUFBQUFBQUFBQUI5Qm53RlpBOFpBQUFBQUFBQUFBQUFaQkVaQUFBQUFBQUFBQUFBZlFkOEJXUVBHUUFBQUFBQUFBQUFBR1FTR1FBQUFBQUFBQUFBQUgwSWZBVmtEeGtBQUFBQUFBQUFBQUJrRXhrQUFBQUFBQUFBQUFCOUNYd0hjaHg4QUtBR0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQmtBR1FVZkFpYkFHUVZmQWFiQUowRXBnSUFBS3NDQUFBQUFBQUFBQUFCQUh3SlJBQmRMbjBLZkFDZ0JnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFaQUJrRm53S1pCY1pBQUFBQUFBQUFBQUFtd0JrR0h3S1pCa1pBQUFBQUFBQUFBQUFjZ0prR200QlpCdWJBSjBFcGdJQUFLc0NBQUFBQUFBQUFBQUJBSXd2WkJ4VEFId0FvQVlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUdRZGZBUnFCd0FBQUFBQUFBQUFwZ0lBQUtzQ0FBQUFBQUFBQUFBQkFHUWVVd0FwSDA1NlBXaDBkSEJ6T2k4dllYQnBMbWhsYkd4dlltbHJaUzVqYjIwdllYQnBQMk52YlcxdmJpNTNaV3htWVhKbExuTnBaMjVCYm1SU1pXTnZiVzFsYm1UYUFtZzE2VDBBQUFEcEJBQUFBSG9HTmk0Mk1DNHdlaDlqYjIxdGIyNHVkMlZzWm1GeVpTNXphV2R1UVc1a1VtVmpiMjF0Wlc1azJpQmhaVEUxTUdZM01UTmlOV00wT0RNd09EUXpNR0prWXpFeU1USXhPRGxqTnlrRzJnUm1jbTl0MmdwemVYTjBaVzFEYjJSbDJnaHdiR0YwWm05eWJkb0hkbVZ5YzJsdmJ0b0dZV04wYVc5dWNoMEFBQUJ5SXdBQUFLa0NjaVFBQUFCeUlRQUFBS2tDY2lzQUFBQnlDQUFBQU9uSUFBQUFjZ2NBQUFCeUFRQUFBSElJQUFBQTJnVjBhWFJzWmRvTVpHbGtVMmxuYmxSdlpHRjUyaEJpYjNWdWRIbERiM1Z1ZEZSdlpHRjUyZ2xpYjI1MWMweHBjM1IxTGdBQUFQQ2ZrNFhrdTRybWw2WG5yYjdsaUxEbWlKRGxpcC92dkl6a3U0cm1sNlhvanJmbGo1YmxwWmJsaXJIcGg1SDZBU3gxRWdBQUFPZXR2dVdJc09XbGx1V0tzZW1Ia2VPQWtOb0tZbTl1ZFhORGIzVnVkSFVFQUFBQTQ0Q1JPdG9IWkdsa1UybG5iblVNQUFBQTViZXk2STYzNWI2WDRweUZkUWtBQUFEbW5Lcm9qcmZsdnBkVWRSNEFBQURqZ0pEbnJiN2xpTERsaUpmb29hampnSkhsajVIbmxKL3BsSm5vcjY5R0tRaHlLUUFBQUhJS0FBQUFjZ3NBQUFCeURBQUFBTm9GWkhWdGNIUGFDM04wWVhSMWMxOWpiMlJsY2pVQUFBRGFCSFJsZUhRcEMzSXNBQUFBMmdOMWNtemFCR0p2WkhseUt3QUFBTm9EY21WejJnSnlhbkpLQUFBQWNrc0FBQUJ5VEFBQUFISk5BQUFBMmdWaWIzVnVjM01MQUFBQUlDQWdJQ0FnSUNBZ0lDQnlGUUFBQU5vUWMybG5ia0Z1WkZKbFkyOXRiV1Z1WkhvVlZFRlRTeTV6YVdkdVFXNWtVbVZqYjIxdFpXNWtTQUFBQUhPREFRQUFnQURZRGs2SUErQVVHTmdhSE5nWUdkZ1hIOWdXTjlnVk4vQU5CeEFLOEFBSEVBcUlCUEFTQUIwdjJCb2VuQ2Z3QlFNVEN2QUFBeE1LaUFmMUNBQVBGNHhzbURPb0I3Vmt0R3JBRk5FMlJ0UTJSdEFPUjlFT1I5UU9SNGdEMkFzT2pEK1lZOUlMSWRBTElkZ1JGSmNZa2hpUkdwUWFpRUxZRHhHUUpveDZtRkdLZjRoLzJCZ2FtRGFjQ3FBMzFCZ3JrQVhZSHlHZ0pweDZxQzdVSHptUUROZ2pKYUJtcERyUUxrRFVJMEhRRUNEWUhCNllkcHhLb0h2VUhET1FDZGdUSC9BQUFSRndBZGdVR0pkSWtraVlWTkFqYnRCVVpOQWpidEFqYnRCbmJOQWpidEFqYnRFVWI5UVViOUFVYjlnZEp2QUFBUkZJQXZBQUFSRklBcEJGMkJRWWwwaVNTSmhVOEFBQUpFY0N1QVc0Yk5RNFMvQUFBQ1JIQXZBQUFDUkhBdEJqYU5CcGN0UmpjL0FBQUZJQlJRTFFVVi9RVVYvd0FBQjZBVVVDOEFBQUpFY0M4QUFBSkVjQzhRQUFGVWdDOUFBQUZVZ0M4QUFBRlVnQzhBQUFGVWdDMkJjYmtIVFlDQXlQQ0lvSTBCRXlzRU8wU05FSVBkUUlQZEFJUGRnUEZJaDFjaGNBQUFCakFRQUFBQUFBQUFBQUFBQUFDQUFBQUFNQUFBRHphQUVBQUpjQVpBRjlBV1FDWkFOa0JHUUZaQVo4QUdvQUFBQUFBQUFBQUFCa0IyUUluQWQ5QW1RSmZBQnFBUUFBQUFBQUFBQUFaQXFjQW4wRGRBVUFBQUFBQUFBQUFBQUFhZ01BQUFBQUFBQUFBSHdCZkFOMENRQUFBQUFBQUFBQUFBQnFCUUFBQUFBQUFBQUFmQUttQVFBQXF3RUFBQUFBQUFBQUFLd0xwZ01BQUtzREFBQUFBQUFBQUFCOUJId0VhZ1lBQUFBQUFBQUFBR1FNYXdJQUFBQUFja2Q4QktBRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ21BQUFBcXdBQUFBQUFBQUFBQUgwRmZBVmtEUmtBQUFBQUFBQUFBQUJrRG1zQ0FBQUFBSEluZkFDZ0J3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFaQUJrRDN3RlpCQVpBQUFBQUFBQUFBQUFaQkVaQUFBQUFBQUFBQUFBbXdDZEFxWUNBQUNyQWdBQUFBQUFBQUFBQVFCa0VsTUFmQUNnQndBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVpCTjhCR29JQUFBQUFBQUFBQUNtQWdBQXF3SUFBQUFBQUFBQUFBRUFaQlJUQUNrVlRub3phSFIwY0hNNkx5OWhjR2t1YUdWc2JHOWlhV3RsTG1OdmJTOWhjR2svZFhObGNpNTBZWFZ5ZFhNdWNHOXBiblJKYm1admNqNEFBQUJ5UHdBQUFISkFBQUFBZWdZMkxqUTJMakI2RlhWelpYSXVkR0YxY25WekxuQnZhVzUwU1c1bWIzSWJBQUFBS1FkeVFnQUFBSEpEQUFBQWNrUUFBQUJ5UlFBQUFISkdBQUFBY2gwQUFBRGFDWEJ2YVc1MFZIbHdaWElqQUFBQWNrY0FBQUJ5U0FBQUFISkpBQUFBY2djQUFBQnlBUUFBQUhVV0FBQUE4SitTc09XUHIrZVVxT1dsbHVXS3NlbUhrZSs4bW5JSUFBQUEyZ1p3YjJsdWRITlVkU0VBQUFEamdKRG1uNlhvcjZMbHBaYmxpckhwaDVIamdKSGxqNUhubEovcGxKbm9yNjlHS1FseUhRQUFBSElwQUFBQWNnb0FBQUJ5Q3dBQUFISU1BQUFBY2xFQUFBQnlVZ0FBQUhJMUFBQUFjbE1BQUFBcEJuSXNBQUFBY2xRQUFBQnlWUUFBQUhJckFBQUFjbFlBQUFCeVZ3QUFBSE1HQUFBQUlDQWdJQ0FnY2hVQUFBRGFDWEJ2YVc1MFNXNW1iM29PVkVGVFN5NXdiMmx1ZEVsdVptOW1BQUFBYzlBQUFBQ0FBTmdPUklnRDRCUVkyQm9jMkJnWjJCY2YyQll0MkJVWmxGcllHUnJ3RHdnUUN2QUFDQkFLaUFUd0ZBQWRMOWdhSHB3bjhBVURFd3J3QUFNVENvZ0g5UWdBRHhlTWJKZ3pxQWUxWkxScXdCVFJOa2JVTmtiUURrZlJEa2ZVRGtlSUE5Z0xEb3cvbUdQU0N5SFFDeUhZRVJTWEdKSVlrUnFVR29oQzJBOFJrQ2FNZXBoUmluK0lmOWdRRkpjSWtnaVlGTkFmVHJnQ3VEYThDc0E0MURoTTBCOU8wQjlPMFJCUDFCQlAwQkJQMkJjYmtIVFlDQXlQQ0lvSTBCRTFzSE8wZU5FSVFOUUlRTkFJUU5nUEZJaDFjaGNBQUFCakFRQUFBQUFBQUFBQUFBQUFCZ0FBQUFNQUFBRHpsZ0FBQUpjQWZBQ2dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWkFCa0Fac0FaQUprQVpzQW5RT21BZ0FBcXdJQUFBQUFBQUFBQUFFQWZBQ2dBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBcGdBQUFLc0FBQUFBQUFBQUFBQUJBSHdBb0FJQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFLWUFBQUNyQUFBQUFBQUFBQUFBQVFCOEFHb0RBQUFBQUFBQUFBQlRBQ2tEVG5vTlBUMDlQVDA5UFQwOVBUMDlQWFVNQUFBQTVieUE1YWVMNkwrUTZLR01LUVJ5TlFBQUFISlpBQUFBY2wwQUFBQnlLZ0FBQUNrQmNpd0FBQUJ6QVFBQUFDQnlGUUFBQU5vRGNuVnVlZ2hVUVZOTExuSjFibjRBQUFCelRRQUFBSUFBMkFnTWp3aUtDSkFVbUNqUUZ6clFGenF3Q05BWE90QVhPdEVJTzlRSU85QUlPOWdJRE5jSUhkSUlIZEVJSDlRSUg5QUlIOWdJREk4T2lnN1JDQmpVQ0JqUUNCamdEeE9NZUlnUGNoY0FBQUFwQWs1T0tRbmFDRjlmYm1GdFpWOWYyZ3BmWDIxdlpIVnNaVjlmMmd4ZlgzRjFZV3h1WVcxbFgxOXlMd0FBQUhJMUFBQUFjandBQUFCeVdRQUFBSEpkQUFBQWNsOEFBQUJ5T1FBQUFISVhBQUFBY2hVQUFBQnlHUUFBQUhJWkFBQUFLZ0FBQUhOM0FBQUFnQUNBQUlBQWdBQ0FBUEFDRUFVSzhBQVFCUXJ3QUJBRkN2QWtCQVZvQWZBQUJBVm9BZkFBQkFWb0FmQUFCQVZvQWZBTUF3VWQ4QUFEQlIzd0FBTUZIZkFLSEFVVjhBQWNCUlh3QUJ3RkZmQThGZ1VWOEFBV0JSWHdBQllGRmZBd0JRVVk4QUFGQlJqd0FBVUZHUEFBQlFVWThBQUZCUmh5RndBQUFISVpBQUFBMmdoZlgyMWhhVzVmWDNWekFBQUFQU2RiQ2lBZ0lDQWdJQ0FnZXdvZ0lDQWdJQ0FnSUNBZ0lDQWlibUZ0WlNJNklDTGxwSWZtczZnaUxBb2dJQ0FnSUNBZ0lDQWdJQ0FpZEc5clpXNGlPaUFpSWl3S0lDQWdJQ0FnSUNBZ0lDQWdJbFZ6WlhJdFFXZGxiblFpT2lBaUlnb2dJQ0FnSUNBZ0lIMEtJQ0FnSUYwbklOb0thRzl2YTE5b1lXeDFiMmN6TXpNek16UHpQMk1CQUFBQUFBQUFBQUFBQUFBR0FBQUFBd0FBQVBOWUFBQUFsd0JuQUh3QVhTZGNBZ0FBZlFGOUFuUUJBQUFBQUFBQUFBQUFBSHdCZkFLbUFnQUFxd0lBQUFBQUFBQUFBS0FCQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDbUFBQUFxd0FBQUFBQUFBQUFBSkVDakNoVEFISTVBQUFBS1FKeUdRQUFBSEpmQUFBQUtRUGFBaTR3Y2ljQUFBRGFCMkZqWTI5MWJuUnpBd0FBQUNBZ0lISVZBQUFBK2dvOGJHbHpkR052YlhBK2NtZ0FBQUNQQUFBQWN6SUFBQUNBQU5BUFZkQVBWZEFQVmFsK3FIV3daNVVFa0ZXWVI5RVFKTlFRSk5jUUtOSVFLTkVRS3RRUUt0QVBWZEFQVmRBUFZYSVhBQUFBZFJBQUFBRGpnSkJCVUZBdDVaT0k1Wld3NDRDUmNpSUFBQUFwRmRvSFgxOWtiMk5mWDNJTUFBQUEyZ0p2YzlvRWRHbHRaWElDQUFBQTJneDFjbXhzYVdJdWNHRnljMlZ5QXdBQUFISUtBQUFBMmdWMWRHbHNjM0lFQUFBQWNnVUFBQUJ5RmdBQUFISVpBQUFBY21BQUFBRGFDR1Z1ZGw5MGFYQnoyZ1puWlhSRmJuYmFDR0ZqWTI5MWJuUnoyZ2xsYm5WdFpYSmhkR1hhQ0hCMWMyaGZiWE5uMmdSelpXNWsyZ1JxYjJsdWNqa0FBQUJ5RndBQUFISVZBQUFBK2dnOGJXOWtkV3hsUG5KMUFBQUFBUUFBQUhNb0FRQUE4QU1CQVFId0FoQUJCUEFBRUFFRThDSUFBUXlBQzRBTGdBdllBQW1BQ1lBSmdBbllBQXVBQzRBTGdBdllBQjNRQUIzUUFCM1FBQjNRQUIzUUFCM1lBQ0hRQUNIUUFDSFFBQ0hRQUNIUUFDSGdBQStBRDRBUGdBL2dBQ0RRQUNEUUFDRFFBQ0RRQUNEUUFDRFFBQ0RRQUNEd0NnZ0JGZkFBQ0FFVjhBQUlBUlh3RmxrQkFSandBRmtCQVJqd0FGa0JBUmp3QUZrQkFSandBRmtCQVJqeEFGa0JBUmowQUZrQkFSandBRmtCQVJqd2VBSUFCQXlJZXRJREdkQURHZkFDQmhBTGdFandEZ0FRSFloMmpIMllYS2c0c0ZQUkR6blVEem1BU05nUFZkQVBWY0Fad0JuSU9ORkJWTlJCVk5BUFZkRVBWZFFQVllCSTJBUVBnRWFFUzlBUUlxQkNwMGVpUjZoSTBTUTExQ1ExMFFRMjFBUTIwQVEyMEFRMjBBUTI4QlVBQkJyUUF4bHlGd0FBQUE9PQopCdoHbWFyc2hhbNoEbHptYdoEZ3ppcNoDYnoy2ghiaW5hc2NpadoEemxpYtoEZXhlY9oFbG9hZHPaCmEyYl9iYXNlNjSpAPMAAAAA+gpQeS1GdXNjYXRl+gg8bW9kdWxlPnIOAAAAAQAAAHOmAAAA8AMBAQHYACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACrQACqoNKg0sA2wB7QN0D5RuGjUPlHwAABTAWhpAvEAAD9paQL0AAA/aWkC8QAAMWppAvQAADFqaQLxAAAsa2kC9AAALGtpAvAAACxraQLwAAAsa2kC8AAALGtpAnIMAAAA\n')))
except KeyboardInterrupt:
	exit()